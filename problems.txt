1) Client and Server Communication:
    - Issue: Happens when client and server are running on different ports (common during development).
    - Solution:
      - If using `create-react-app`, set `"proxy": "server_url"` in `package.json` (e.g., `"http://localhost:5000"` if the server runs on port 5000).
      - If using `vite`, add the following snippet to `vite.config.js`:
         ```javascript
         server: {
              proxy: {
                    '/api': 'http://localhost:3000' // Vite uses port 5173, server set to port 3000
              }
         }
         ```

2) Arrow Functions in Mongoose Schema Methods:
    - Issue: Arrow functions don't work correctly in Mongoose schema methods because `this` in arrow functions doesn't refer to the schema instance.
    - Solution: Avoid using arrow functions in schema methods. Use regular functions instead.
    - Reference: [FreeCodeCamp Forum](https://forum.freecodecamp.org/t/why-i-couldnt-user-arrow-function/360754)

3) Error: "Form submission canceled because the form is not connected":
    - Issue: Happens when the `submitHandler` function is assigned to a Button's `onClick` listener.
    - Solution: Assign the `submitHandler` function to the `onSubmit` listener of the `<form>` tag.

4) Page Reload on Form Submission:
    - Issue: Missing `e.preventDefault()` in the `submitHandler` causes the page to reload.
    - Solution: Use `e.preventDefault()` in the `submitHandler` to prevent the default form submission behavior.

5) Uploading Images to MongoDB:
    - Issue: Converting images to base64 results in a string too large for form submission.
    - Solution:
      - Use a cloud service like AWS S3 for image storage.
      - Steps:
         1. Create an S3 free-tier bucket and an IAM user with full S3 permissions.
         2. Use `aws-sdk`, `multer`, and `multer-s3` modules to upload images to the S3 bucket using IAM credentials.
         3. Store the image URL in MongoDB.
      - Notes:
         - Use the latest versions of `@aws-sdk` and `multer` to avoid compatibility issues.
         - Remove all block permissions from the bucket and apply a policy to allow public access via the image link.
         - Remove `"acl: public-read"` from the `multer-s3` boilerplate.

6) Importing Middlewares and Functions in Route Handlers:
    - Best Practice: Always use curly braces when importing middlewares and functions.
      - Example: `const { routeHandler1 } = require("path");`
    - Action: Review all `require` statements in the `routes` folder files.
